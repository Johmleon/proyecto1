esta es la historia el prologo del proyecto.

contando con 26 años comenzando los primeros pasos en la programacion.

git init: iniciar git en una carpeta.

git add para añadir el archivo a la carpeta.

git commit -m "comentario" para subir el archivo al repo.
cuando haces un commit y no le pones comentario, te salta una ventana, donde te sugiere que
le coloques un mensaje, para salir de esa venta tienes que pulsar
esc + shift + z + z.

git commit -am "Mensaje del commit" : se utiliza solo con archivos a los cuales ya se les 
ha hecho git add anteriormente.

git show para mostrar cambios.

git log para mostrar registro.

git diff a + b para comparar cambios.

git log --stat se usa para mostrar exactamente los cambios realizados.
pulsa Q para salir.

git reset se utiliza para volver al pasado pero sin la posibilidad de ir al futuro nuevamente
git reset --hard
git reset --soft
git reser HEAD: se utiliza para sacar archivos de staging

Como volver a una version anterior:
git checkout + commit del archivo + nombre del archivo: se utiliza para ver como era el archivo
para volver a la version que se tenia se tiene que colocar 
git checkout master + nombre del archivo.

git rm eliminar archivos sin eliminar su historial, se puede recuperar.
git rm --cached: elimina de local y de staging
git rm --force: elimina de local y de disco duro

Comandos para trabajo remoto con GIT:

git clone url_del_servidor_remoto: Nos permite descargar los archivos de la última versión 
de la rama principal y todo el historial de cambios en la carpeta .git.

git push: Luego de hacer git add y git commit debemos ejecutar este comando para 
mandar los cambios al servidor remoto.

git fetch: Lo usamos para traer actualizaciones del servidor remoto y guardarlas en nuestro 
repositorio local (en caso de que hayan, por supuesto).

git merge: También usamos el comando git merge con servidores remotos. 
Lo necesitamos para combinar los últimos cambios del servidor remoto y nuestro 
directorio de trabajo.

Si en las dos ramas se hicieron cambios sobre la misma linea,
git arroja un error y no deja hacer el merge.

git merge --abort: se utiliza para revertir un merge.

git pull: Básicamente, git fetch y git merge al mismo tiempo.

Comandos para trabajar con ramas:

git branch -nombre de la rama-: Con este comando se genera una nueva rama.

git checkout -nombre de la rama-: Con este comando puedes saltar de una rama a otra.

git checkout -b rama: Genera una rama y nos mueve a ella automáticamente, Es decir, es la combinación de git branch y git checkout al mismo tiempo.

git reset id-commit: Nos lleva a cualquier commit no importa la rama, ya que identificamos el id del tag., eliminando el historial de los commit posteriores al tag seleccionado.

git checkout rama-o-id-commit: Nos lleva a cualquier commit sin borrar los commit posteriores al tag seleccionado.

